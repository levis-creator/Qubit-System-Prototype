@* @page "/courses/edit" *@
@* @inject NavigationManager NavigationManager *@

@* <PageTitle>Edit</PageTitle> *@

@* <h1>Edit</h1> *@

@* <h2>Courses</h2> *@
@* <hr /> *@
@* @if (Course is null) *@
@* { *@
@*     <p><em>Loading...</em></p> *@
@* } *@
@* else *@
@* { *@
@*     <div class="row"> *@
@*         <div class="col-md-4"> *@
@*             <EditForm method="post" Model="Course" OnValidSubmit="UpdateCourse" FormName="edit" Enhance> *@
@*                 <DataAnnotationsValidator /> *@
@*                 <ValidationSummary role="alert" /> *@
@*                 <input type="hidden" name="Course.Id" value="@Course.Id" /> *@
@*                 <div class="mb-3"> *@
@*                     <label for="courseName" class="form-label">Course Name:</label> *@
@*                     <InputText id="courseName" @bind-Value="Course.CourseName" class="form-control" /> *@
@*                     <ValidationMessage For="() => Course.CourseName" class="text-danger" /> *@
@*                 </div> *@
@*                 <div class="mb-3"> *@
@*                     <label for="courseCode" class="form-label">Course Code:</label> *@
@*                     <InputText id="courseCode" @bind-Value="Course.CourseCode" class="form-control" /> *@
@*                     <ValidationMessage For="() => Course.CourseCode" class="text-danger" /> *@
@*                 </div> *@
@*                 <div class="form-group"> *@
@*                     <label for="DepartmentId">Department</label> *@
@*                     <InputSelect id="DepartmentId" class="form-control" @bind-Value="Course.DepartmentId"> *@
@*                         <option value="">-- Select Department --</option> *@
@*                         @foreach (var dept in departments) *@
@*                         { *@
@*                             <option value="@dept.Id">@dept.DepartmentName</option> *@
@*                         } *@
@*                     </InputSelect> *@
@*                     <ValidationMessage For="() => Course.DepartmentId" /> *@
@*                 </div> *@

@*                 <button type="submit" class="btn btn-primary">Save</button> *@
@*             </EditForm> *@
@*         </div> *@
@*     </div> *@
@* } *@

@* <div> *@
@*     <a href="/courses">Back to List</a> *@
@* </div> *@

@* @code { *@
@*     [SupplyParameterFromQuery] *@
@*     private int Id { get; set; } *@

@*     [SupplyParameterFromForm] *@
@*     private Course? Course { get; set; } *@
@*     private List<Department> departments { get; set; } = []; *@



@*     protected override async Task OnInitializedAsync() *@
@*     { *@

@*         Course ??= await CourseRepository.GetById(Id); *@
@*         departments = await DepartmentRepository.GetAll().Result.ToListAsync(); *@


@*         if (Course is null) *@
@*         { *@
@*             NavigationManager.NavigateTo("notfound"); *@
@*         } *@
@*     } *@

@*     // To protect from overposting attacks, enable the specific properties you want to bind to. *@
@*     // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks. *@
@*     private async Task UpdateCourse() *@
@*     { *@
@*         try *@
@*         { *@

@*             await CourseRepository.Update(Course!); *@
@*             NavigationManager.NavigateTo("/courses"); *@
@*         } *@
@*         catch (Exception) *@
@*         { *@
@*             throw; *@
@*         } *@
@*     } *@

@* } *@
