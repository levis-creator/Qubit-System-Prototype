 @page "/students/delete" 
 @inject NavigationManager NavigationManager 

 <PageTitle>Delete</PageTitle> 

 <h1>Delete</h1> 

 <p>Are you sure you want to delete this?</p> 
 <div> 
     <h2>Courses</h2> 
     <hr /> 
     @if (student is null) 
     { 
         <p><em>Loading...</em></p> 
     } 
     else 
     { 
         <dl class="row"> 
             <dt class="col-sm-2">First Name</dt> 
             <dd class="col-sm-10">@student.FirstName</dd> 
         </dl> 
         <dl class="row"> 
             <dt class="col-sm-2">Last Name</dt> 
             <dd class="col-sm-10">@student.LastName</dd> 
         </dl> 
         <dl class="row"> 
             <dt class="col-sm-2">Admission No</dt> 
             <dd class="col-sm-10">@student.AdmissionNo</dd> 
         </dl> 
      
         <EditForm method="post" Model="student" OnValidSubmit="DeleteStudent" FormName="delete" Enhance> 
             <button type="submit" class="btn btn-danger" disabled="@(student is null)">Delete</button> | 
             <a href="/students">Back to List</a> 
         </EditForm> 
     } 
 </div> 

 @code { 
     private StudentDetailsDto? student; 

     [SupplyParameterFromQuery] 
     private string Id{ get; set; } = string.Empty;

     protected override async Task OnInitializedAsync() 
     { 

         student = await StudentRepository.GetStudentFullDetails(Id); 

         if (student is null) 
         { 
             NavigationManager.NavigateTo("notfound"); 
         } 
     } 

     private async Task DeleteStudent() 
     { 
         if (student != null) 
         { 
             var isDeleted = await StudentRepository.Delete(student.Id); 
             if (isDeleted) 
             { 
                 NavigationManager.NavigateTo("/students"); 
             } 
         } 
     } 
 } 
