@implements IDisposable

@using Microsoft.AspNetCore.Identity
@using QubitWith.Auth.Data.Persistence.Contracts

@inject NavigationManager NavigationManager
@inject IAuthRepository AuthRepository


<AuthorizeView>
    <Authorized>

        <!-- Avatar -->
        <div Class="dropdown">
            <button class="btn dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                <img src="https://mdbcdn.b-cdn.net/img/Photos/Avatars/img (31).webp" class="rounded-circle"
                     height="40" alt="Avatar" loading="lazy" />
            </button>
            <ul class="dropdown-menu dropdown-menu-end">
                <li class="dropdown-header">@context.User.Identity?.Name</li>
                <li> <a class="dropdown-item btn w-100 m-0" href="Account/Manage">Profile </a></li>
                <li>
                    <form  action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <button type="submit" class="dropdown-item">
                            Logout
                        </button>
                    </form>
                </li>
            </ul>

        </div>
    </Authorized>
</AuthorizeView>
@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}